The Language

The language is based on the fragments in Chapter 6: expressions, arrays,
boolean expressions, statements, declarations, blocks:

Program  ->  { Decls Stmts }
Decls   ->  e | Decls Decl | Decl
Decl    ->  Type id ;
Type    ->  Type [ num ] | int | float | char | bool
Stmts   ->  e | Stmts Stmt | Stmt
Stmt    ->  loc = expr ; | if ( bool ) Stmt | if ( bool ) Stmt else Stmt | while ( bool ) Stmt
   |   do Stmt while ( bool ) ; | break ; | { Decls Stmts } | choose { Branchs } | stop
Branchs ->  e | Branchs num : Stmt
bool    ->  bool or bool | bool and bool | ! bool | ( bool ) | expr rel expr | true | false
expr    ->  expr + expr | expr - expr | expr * expr | expr / expr | loc | ( bool ) | num
loc     ->  loc [ bool ] | id


Package lexer

class Tag. Tags distinguish tokens.
class Token with subclasses Num, Real, and Word
class Lexer, with procedure scan


Package symbols

class Type.  Put types here.
class Id.  Could have put Id's with expressions; in fact Id extends Expr
clas Env.  Linked symbol tables.

To distinguish between multiple declarations of the same name, uncomment
the line

//	public String toString() {return "" + op.toString() + offset;}

in class Id in package inter.  The intermediate code will then print the
offset as a suffix to an identifier.

USAGE FROM PROJECT ROOT DIRECTORY:
java main.Main <FILE_PATH.t >OUTPUT_FILE.i
